//Fun√ß√µes - Estrutura B√°sica

function somar(a,b){
    return a + b;
}

//fun√ß√µes declaradas
function fazerSorvete(quantidade){
    return 'üç¶'.repeat(quantidade);
}

//fun√ß√µes expressadas
let fazerSushi = function(quantidade){
    return 'üç£'.repeat(quantidade);
}

//Executando uma Fun√ß√£o:
nomeFunction();
/*se quiser ver ou salvar os dados que retornam, 
√© necess√°rio armazen√°-los em uma vari√°vel
ou fazer um console.log() da execu√ß√£o. */
let resultado = nomeFunction();
console.log(nomeFunction());

//Exemplo:
function greetings(name, surname){
    return 'Hello ' + name + ' ' + surname;
}
greetings('Paola', 'Pagotto');
greetings(); // return undefined

function greetings(name = 'visitante', surname = 'an√¥nimo'){
    return 'Hello ' + name + ' ' + surname;
} 
greetings(); // par√¢metros com valores predefinidos



// Escopo, ou alcance da Fun√ß√£o

//Escopo Local
function minhaFuncao(){
    /*todo c√≥digo que escrevemos dentro 
    da nossa fun√ß√£o tem escopo local. */
}

function ola(){
    let saudacao = 'Ol√°, tudo bem?'
    return saudacao;
}
console.log(saudacao); // return Uncaught ReferenceError: saudacao is not defined

//Escopo Global
    /* todo c√≥digo escrito fora 
    das fun√ß√µes √© global. */
var minhaVariavel;
function minhaFuncao(){
    //temos acesso √†s vari√°veis globais.
}

let saudacao = 'Ol√°, tudo bem?';
function ola(){
    return saudacao;
}

//Exerc√≠cios:

//Fun√ß√£o √© par
function ePar(value){
    return value % 2 == 0;
}


/*  Escreva as tr√™s fun√ß√µes a seguir:

    anterior: recebe um n√∫mero como par√¢metro e retorna esse n√∫mero menos um.

    triplo: recibe um n√∫mero como par√¢metro e devolve o triplo desse n√∫mero.

    anteriorDoTriplo: receba um n√∫mero como par√¢metro e, usando as duas fun√ß√µes anteriores, 
    voc√™ ter√° que retornar o n√∫mero. recebido multiplicado por 3 (tr√™s) e o resultado subtrai 1 (um).
*/

let numberValue;
function anterior(numberValue){
    return numberValue - 1;
}
function triplo(numberValue){
    return numberValue * 3;
}
function anteriorDoTriplo(numberValue){
    return anterior(triplo(numberValue));
}
